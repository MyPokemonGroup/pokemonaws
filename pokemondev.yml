AWSTemplateFormatVersion: 2010-09-09
Parameters:
  KeyName:
    Description: Name of existing EC2 Key Pair for ssh acces to dev EC2 instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Security Configuration
        Parameters:
          - KeyName
Resources:
  DevEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-4aa04129 
      AvailabilityZone: us-west-1b
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref SSHNetworkInterface
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref WebNetworkInterface
          DeviceIndex: '1'
  DevVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
  DevSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref DevVPC
      GroupName: DevGroup
      GroupDescription: security group for developers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  DevSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref DevVPC
      AvailabilityZone: us-west-1b
      MapPublicIpOnLaunch: 'true'
  DevVolume:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt 
        - DevEC2Instance
        - AvailabilityZone
      Size: '45'
  DevVolumeAttachment:
    Type: 'AWS::EC2::VolumeAttachment'
    Properties:
      VolumeId: !Ref DevVolume
      InstanceId: !Ref DevEC2Instance
      Device: /dev/sdh
  DevInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  DevInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref DevVPC
      InternetGatewayId: !Ref DevInternetGateway
  SSHIpAddress:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  SSHIpAddressAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt 
        - SSHIpAddress
        - AllocationId
      NetworkInterfaceId: !Ref SSHNetworkInterface
  SSHNetworkInterface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref DevSubnet
      GroupSet:
        - !Ref DevSecurityGroup
      SourceDestCheck: 'true'
  WebIpAddress:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  WebIpAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt 
        - WebIpAddress
        - AllocationId
      NetworkInterfaceId: !Ref WebNetworkInterface
  WebNetworkInterface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref DevSubnet
      GroupSet:
        - !Ref DevSecurityGroup
      SourceDestCheck: 'true'
  DevRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref DevVPC
  DevRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: DevInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref DevRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DevInternetGateway
  DevRouteAassociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref DevRouteTable
      SubnetId: !Ref DevSubnet
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref DevVPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InboundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundSSHNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutBoundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutBoundHTTPSNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  OutBoundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DevSubnet
      NetworkAclId: !Ref NetworkAcl

